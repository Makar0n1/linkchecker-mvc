/**
 * agendaScheduler.js - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Agenda
 * 
 * –ó–∞–º–µ–Ω—è–µ—Ç node-schedule –Ω–∞ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–π Agenda.
 * 
 * –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Agenda –Ω–∞–¥ node-schedule:
 * - –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á –≤ MongoDB (–ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏)
 * - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–æ–≤)
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
 * - –ü—Ä–∏–æ—Ä–∏—Ç–µ–∑–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å—é
 * - –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
 * - Graceful shutdown
 */

const dotenv = require('dotenv');
const path = require('path');

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const envPath = process.env.NODE_ENV === 'production'
  ? path.resolve(__dirname, '../../../.env.prod')
  : path.resolve(__dirname, '../../../.env');
dotenv.config({ path: envPath });

console.log(`[AgendaScheduler] üìã Loading environment from: ${envPath}`);
console.log(`[AgendaScheduler] üìã MONGODB_URI defined: ${!!process.env.MONGODB_URI}`);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è MONGODB_URI
if (!process.env.MONGODB_URI) {
  console.error('[AgendaScheduler] ‚ùå MONGODB_URI is not defined in environment!');
  console.error(`[AgendaScheduler] ‚ùå Tried to load from: ${envPath}`);
  throw new Error('MONGODB_URI is required for Agenda scheduler');
}

const Agenda = require('agenda');
const mongoose = require('mongoose');
const Spreadsheet = require('../models/Spreadsheet');
const Project = require('../models/Project');
const User = require('../models/User');
const AnalysisTask = require('../models/AnalysisTask');
const { addLinkAnalysisJobs, monitorTaskCompletion } = require('../controllers/taskQueue');

// –°–æ–∑–¥–∞–Ω–∏–µ Agenda —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
const agenda = new Agenda({
  db: { 
    address: process.env.MONGODB_URI,
    collection: 'agendaJobs', // –û—Ç–¥–µ–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è Agenda
    options: { useUnifiedTopology: true },
  },
  processEvery: '1 minute', // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  maxConcurrency: 3, // –ú–∞–∫—Å–∏–º—É–º 3 –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
  defaultConcurrency: 1, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –∑–∞–¥–∞—á–∞ –∑–∞ —Ä–∞–∑
  defaultLockLifetime: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
});

console.log('[AgendaScheduler] üöÄ Initializing Agenda scheduler...');

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∏–Ω–≥–∞ spreadsheet
 */
agenda.define('ping-spreadsheet', { priority: 'normal', concurrency: 2 }, async (job) => {
  const { pingSpreadsheetId } = job.attrs.data;
  
  console.log(`[AgendaScheduler] üèì Starting scheduled ping for ${pingSpreadsheetId}`);
  
  try {
    const { executePingAnalysis } = require('../controllers/pingController');
    await executePingAnalysis(pingSpreadsheetId);
    
    console.log(`[AgendaScheduler] üéâ Successfully completed ping for ${pingSpreadsheetId}`);
  } catch (error) {
    console.error(`[AgendaScheduler] ‚ùå Error pinging spreadsheet ${pingSpreadsheetId}:`, error.message);
    throw error;
  }
});

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ spreadsheet
 */
agenda.define('analyze-spreadsheet', { priority: 'high', concurrency: 1 }, async (job) => {
  const { spreadsheetId, projectId, userId } = job.attrs.data;
  
  console.log(`[AgendaScheduler] üìä Starting scheduled analysis for spreadsheet ${spreadsheetId}`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ spreadsheet
    const spreadsheet = await Spreadsheet.findById(spreadsheetId);
    if (!spreadsheet) {
      console.log(`[AgendaScheduler] ‚ö†Ô∏è Spreadsheet ${spreadsheetId} not found, cancelling job`);
      await agenda.cancel({ 'data.spreadsheetId': spreadsheetId });
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –∞–Ω–∞–ª–∏–∑
    const project = await Project.findById(projectId);
    if (!project) {
      console.log(`[AgendaScheduler] ‚ö†Ô∏è Project ${projectId} not found, cancelling job`);
      return;
    }
    
    if (project.isAnalyzingSpreadsheet) {
      console.log(`[AgendaScheduler] ‚ö†Ô∏è Project ${projectId} already analyzing, skipping`);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findById(userId);
    if (!user) {
      console.log(`[AgendaScheduler] ‚ö†Ô∏è User ${userId} not found`);
      return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞
    const linkLimits = {
      basic: 1000,
      pro: 5000,
      premium: 10000,
      enterprise: 50000,
    };
    const maxLinks = linkLimits[user.plan] || 0;
    
    if (maxLinks === 0) {
      console.log(`[AgendaScheduler] ‚ö†Ô∏è User ${userId} does not have a valid plan for spreadsheets`);
      return;
    }
    
    console.log(`[AgendaScheduler] ‚úÖ Starting analysis with maxLinks=${maxLinks}`);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∞–Ω–∞–ª–∏–∑–∞
    const task = new AnalysisTask({
      projectId,
      userId,
      type: 'runSpreadsheetAnalysis',
      status: 'pending',
      totalLinks: 0, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
      processedLinks: 0,
      progress: 0,
      data: { userId, projectId, spreadsheetId, maxLinks },
    });
    await task.save();
    console.log(`[AgendaScheduler] ‚úÖ Created analysis task ${task._id}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.activeTasks.set(projectId.toString(), task._id.toString());
    await user.save();
    
    // –ü–æ–º–µ—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∫–∞–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π
    project.isAnalyzingSpreadsheet = true;
    await project.save();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º spreadsheet
    spreadsheet.status = 'checking';
    await spreadsheet.save();
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ Google Sheets
    const { importFromGoogleSheets } = require('../controllers/googleSheetsUtils');
    const { links: importedLinks } = await importFromGoogleSheets(
      spreadsheet.spreadsheetId,
      spreadsheet.targetDomain,
      spreadsheet.urlColumn,
      spreadsheet.targetColumn,
      spreadsheet.gid
    );
    
    console.log(`[AgendaScheduler] üìã Imported ${importedLinks.length} links from spreadsheet`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if (importedLinks.length > maxLinks) {
      throw new Error(`Spreadsheet has ${importedLinks.length} links, but limit is ${maxLinks}`);
    }
    
    // –°–æ–∑–¥–∞–µ–º FrontendLink –¥–ª—è –∫–∞–∂–¥–æ–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
    const FrontendLink = require('../models/FrontendLink');
    await FrontendLink.deleteMany({ 
      projectId, 
      spreadsheetId, 
      source: 'google_sheets' 
    });
    
    const createdLinks = [];
    for (const linkData of importedLinks) {
      const newLink = new FrontendLink({
        url: linkData.url,
        targetDomains: linkData.targetDomains,
        projectId,
        userId,
        spreadsheetId,
        rowIndex: linkData.rowIndex,
        source: 'google_sheets',
        status: 'pending',
        taskId: task._id,
      });
      await newLink.save();
      createdLinks.push(newLink);
    }
    
    console.log(`[AgendaScheduler] ‚úÖ Created ${createdLinks.length} FrontendLinks`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º totalLinks –≤ –∑–∞–¥–∞—á–µ
    await AnalysisTask.findByIdAndUpdate(task._id, {
      $set: { totalLinks: createdLinks.length },
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ BullMQ –æ—á–µ—Ä–µ–¥—å
    const result = await addLinkAnalysisJobs(
      task._id, 
      projectId, 
      userId, 
      'google_sheets', 
      spreadsheetId
    );
    console.log(`[AgendaScheduler] ‚úÖ Added ${result.added} jobs to BullMQ queue`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    monitorTaskCompletion(task._id, projectId, userId, 'google_sheets', spreadsheetId);
    
    console.log(`[AgendaScheduler] üéâ Successfully started analysis for spreadsheet ${spreadsheetId}`);
  } catch (error) {
    console.error(`[AgendaScheduler] ‚ùå Error analyzing spreadsheet ${spreadsheetId}:`, error.message);
    console.error(error.stack);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
    await Spreadsheet.findByIdAndUpdate(spreadsheetId, {
      $set: { status: 'error' },
      $inc: { scanCount: 1 },
    }).catch(() => {});
    
    await Project.findByIdAndUpdate(projectId, {
      $set: { isAnalyzingSpreadsheet: false },
    }).catch(() => {});
    
    throw error; // Agenda –ø–æ–º–µ—Ç–∏—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ failed
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 */
agenda.on('success', (job) => {
  console.log(`[AgendaScheduler] ‚úÖ Job "${job.attrs.name}" succeeded`);
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∑–∞–¥–∞—á–∏
 */
agenda.on('fail', (error, job) => {
  console.error(`[AgendaScheduler] ‚ùå Job "${job.attrs.name}" failed:`, error.message);
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏
 */
agenda.on('start', (job) => {
  console.log(`[AgendaScheduler] üîÑ Job "${job.attrs.name}" started`);
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 */
agenda.on('complete', (job) => {
  console.log(`[AgendaScheduler] ‚úÖ Job "${job.attrs.name}" completed`);
});

/**
 * –ó–∞–ø—É—Å–∫ Agenda
 */
const startAgenda = async () => {
  try {
    await agenda.start();
    console.log('[AgendaScheduler] ‚úÖ Agenda scheduler started successfully');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ spreadsheets –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º –∏—Ö
    await scheduleExistingSpreadsheets();
  } catch (error) {
    console.error('[AgendaScheduler] ‚ùå Failed to start Agenda:', error.message);
    throw error;
  }
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö spreadsheets
 * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ —É–∂–µ —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –∑–∞–ø—É—Å–∫–∞–ª–∏—Å—å (lastRun !== null)
 */
const scheduleExistingSpreadsheets = async () => {
  try {
    console.log('[AgendaScheduler] üîç Loading existing spreadsheets...');
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ spreadsheets, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã —Ö–æ—Ç—è –±—ã —Ä–∞–∑
    const spreadsheets = await Spreadsheet.find({ 
      status: { $in: ['pending', 'completed'] },
      lastRun: { $ne: null } // –¢–æ–ª—å–∫–æ —Å lastRun (—É–∂–µ –∑–∞–ø—É—Å–∫–∞–ª–∏—Å—å)
    });
    
    console.log(`[AgendaScheduler] üìã Found ${spreadsheets.length} spreadsheets to schedule (with lastRun)`);
    
    for (const spreadsheet of spreadsheets) {
      try {
        await scheduleSpreadsheet(spreadsheet);
      } catch (error) {
        console.error(`[AgendaScheduler] ‚ö†Ô∏è Failed to schedule spreadsheet ${spreadsheet._id}:`, error.message);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ
      }
    }
    
    console.log('[AgendaScheduler] ‚úÖ Finished scheduling existing spreadsheets');
  } catch (error) {
    console.error('[AgendaScheduler] ‚ùå Error scheduling existing spreadsheets:', error.message);
  }
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ spreadsheet
 * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –û–î–ò–ù –∑–∞–ø—É—Å–∫ –≤ –±—É–¥—É—â–µ–º (lastRun + intervalHours)
 * @param {Object} spreadsheet - –û–±—ä–µ–∫—Ç Spreadsheet –∏–∑ MongoDB
 */
const scheduleSpreadsheet = async (spreadsheet) => {
  try {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    try {
      await agenda.cancel({ 
        name: 'analyze-spreadsheet', 
        'data.spreadsheetId': spreadsheet._id.toString() 
      });
      console.log(`[AgendaScheduler] üóëÔ∏è Cancelled old job for spreadsheet ${spreadsheet._id}`);
    } catch (cancelError) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –∑–∞–¥–∞—á–∏ –Ω–µ –±—ã–ª–æ
      console.log(`[AgendaScheduler] ‚ÑπÔ∏è No previous job to cancel for spreadsheet ${spreadsheet._id}`);
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    const now = new Date();
    const lastRun = spreadsheet.lastRun || now;
    const intervalMs = spreadsheet.intervalHours * 60 * 60 * 1000;
    
    // –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ = lastRun + intervalHours
    const nextRun = new Date(lastRun.getTime() + intervalMs);
    
    // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ - –∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
    const scheduleTime = nextRun > now ? nextRun : new Date(now.getTime() + 60000);
    
    const timeUntilRun = Math.round((scheduleTime - now) / 1000 / 60); // –º–∏–Ω—É—Ç—ã
    
    console.log(`[AgendaScheduler] üìÖ Scheduling spreadsheet ${spreadsheet._id}`);
    console.log(`[AgendaScheduler]    Last run: ${lastRun.toISOString()}`);
    console.log(`[AgendaScheduler]    Interval: ${spreadsheet.intervalHours} hours`);
    console.log(`[AgendaScheduler]    Next run: ${scheduleTime.toISOString()} (in ${timeUntilRun} minutes)`);
    
    // –°–æ–∑–¥–∞–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é –∑–∞–¥–∞—á—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
    await agenda.schedule(scheduleTime, 'analyze-spreadsheet', {
      spreadsheetId: spreadsheet._id.toString(),
      projectId: spreadsheet.projectId.toString(),
      userId: spreadsheet.userId.toString(),
    });
    
    console.log(`[AgendaScheduler] ‚úÖ Scheduled spreadsheet ${spreadsheet._id} for ${scheduleTime.toISOString()}`);
  } catch (error) {
    console.error(`[AgendaScheduler] ‚ùå Error scheduling spreadsheet ${spreadsheet._id}:`, error.message);
    console.error(error.stack);
    throw error;
  }
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è spreadsheet
 * @param {string} spreadsheetId - ID spreadsheet
 */
const cancelSpreadsheetSchedule = async (spreadsheetId) => {
  try {
    const numRemoved = await agenda.cancel({ 
      name: 'analyze-spreadsheet', 
      'data.spreadsheetId': spreadsheetId.toString() 
    });
    
    console.log(`[AgendaScheduler] üóëÔ∏è Cancelled ${numRemoved} jobs for spreadsheet ${spreadsheetId}`);
  } catch (error) {
    console.error(`[AgendaScheduler] ‚ùå Error cancelling schedule for spreadsheet ${spreadsheetId}:`, error.message);
    throw error;
  }
};

/**
 * Graceful shutdown Agenda
 */
const shutdownAgenda = async () => {
  console.log('[AgendaScheduler] üîí Shutting down Agenda...');
  
  try {
    await agenda.stop();
    console.log('[AgendaScheduler] ‚úÖ Agenda shutdown complete');
  } catch (error) {
    console.error('[AgendaScheduler] ‚ùå Error during Agenda shutdown:', error.message);
  }
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ping spreadsheet
 * @param {Object} pingSpreadsheet - –û–±—ä–µ–∫—Ç PingSpreadsheet –∏–∑ MongoDB
 */
const schedulePingSpreadsheet = async (pingSpreadsheet) => {
  try {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    try {
      await agenda.cancel({ 
        name: 'ping-spreadsheet', 
        'data.pingSpreadsheetId': pingSpreadsheet._id.toString() 
      });
      console.log(`[AgendaScheduler] üóëÔ∏è Cancelled old ping job for ${pingSpreadsheet._id}`);
    } catch (cancelError) {
      console.log(`[AgendaScheduler] ‚ÑπÔ∏è No previous ping job to cancel for ${pingSpreadsheet._id}`);
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    const now = new Date();
    const lastRun = pingSpreadsheet.lastRun || now;
    const intervalMs = pingSpreadsheet.intervalDays * 24 * 60 * 60 * 1000;
    
    // –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ = lastRun + intervalDays
    const nextRun = new Date(lastRun.getTime() + intervalMs);
    
    // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ - –∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
    const scheduleTime = nextRun > now ? nextRun : new Date(now.getTime() + 60000);
    
    const timeUntilRun = Math.round((scheduleTime - now) / 1000 / 60 / 60); // —á–∞—Å—ã
    
    console.log(`[AgendaScheduler] üèì Scheduling ping spreadsheet ${pingSpreadsheet._id}`);
    console.log(`[AgendaScheduler]    Last run: ${lastRun.toISOString()}`);
    console.log(`[AgendaScheduler]    Interval: ${pingSpreadsheet.intervalDays} days`);
    console.log(`[AgendaScheduler]    Next run: ${scheduleTime.toISOString()} (in ${timeUntilRun} hours)`);
    
    // –°–æ–∑–¥–∞–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é –∑–∞–¥–∞—á—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
    await agenda.schedule(scheduleTime, 'ping-spreadsheet', {
      pingSpreadsheetId: pingSpreadsheet._id.toString(),
    });
    
    console.log(`[AgendaScheduler] ‚úÖ Scheduled ping spreadsheet ${pingSpreadsheet._id} for ${scheduleTime.toISOString()}`);
  } catch (error) {
    console.error(`[AgendaScheduler] ‚ùå Error scheduling ping spreadsheet ${pingSpreadsheet._id}:`, error.message);
    throw error;
  }
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ping spreadsheet
 * @param {string} pingSpreadsheetId - ID ping spreadsheet
 */
const cancelPingSpreadsheetSchedule = async (pingSpreadsheetId) => {
  try {
    const numRemoved = await agenda.cancel({ 
      name: 'ping-spreadsheet', 
      'data.pingSpreadsheetId': pingSpreadsheetId.toString() 
    });
    
    console.log(`[AgendaScheduler] üóëÔ∏è Cancelled ${numRemoved} ping jobs for ${pingSpreadsheetId}`);
  } catch (error) {
    console.error(`[AgendaScheduler] ‚ùå Error cancelling ping schedule for ${pingSpreadsheetId}:`, error.message);
    throw error;
  }
};

// Graceful shutdown handlers
process.on('SIGTERM', shutdownAgenda);
process.on('SIGINT', shutdownAgenda);

module.exports = {
  agenda,
  startAgenda,
  scheduleSpreadsheet,
  cancelSpreadsheetSchedule,
  schedulePingSpreadsheet,
  cancelPingSpreadsheetSchedule,
  shutdownAgenda,
};

