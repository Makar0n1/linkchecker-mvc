/**
 * linkQueue.js - –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º BullMQ
 * 
 * –ó–∞–º–µ–Ω—è–µ—Ç async.queue –Ω–∞ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—É—é —Å–∏—Å—Ç–µ–º—É –æ—á–µ—Ä–µ–¥–µ–π BullMQ.
 * 
 * –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ BullMQ –Ω–∞–¥ async.queue:
 * - –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ Redis (–ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏)
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö (exponential backoff)
 * - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ—Ä–∫–µ—Ä–æ–≤)
 * - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
 * - –ü—Ä–∏–æ—Ä–∏—Ç–µ–∑–∞—Ü–∏—è –∑–∞–¥–∞—á
 * - Graceful shutdown
 */

const { Queue } = require('bullmq');
const Redis = require('ioredis');

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
const connection = new Redis({
  host: process.env.REDIS_HOST || 'localhost',
  port: process.env.REDIS_PORT || 6379,
  password: process.env.REDIS_PASSWORD || undefined,
  maxRetriesPerRequest: null,
  enableReadyCheck: false,
  retryStrategy(times) {
    const delay = Math.min(times * 50, 2000);
    return delay;
  },
});

// –û—á–µ—Ä–µ–¥—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–æ–∫
// QueueScheduler –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –≤ BullMQ v3+ - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤ Queue
const linkAnalysisQueue = new Queue('link-analysis', {
  connection,
  defaultJobOptions: {
    attempts: 3, // –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ –∑–∞–¥–∞—á—É
    backoff: {
      type: 'exponential',
      delay: 5000, // 5 —Å–µ–∫—É–Ω–¥ –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    },
    removeOnComplete: {
      age: 3600, // –£–¥–∞–ª—è—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ 1 —á–∞—Å (–¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏)
      count: 100, // –•—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    },
    removeOnFail: {
      age: 7200, // –£–¥–∞–ª—è—Ç—å —É–ø–∞–≤—à–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞
      count: 50, // –•—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —É–ø–∞–≤—à–∏—Ö –∑–∞–¥–∞—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    },
  },
});

// –°–æ–±—ã—Ç–∏—è –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

linkAnalysisQueue.on('error', (error) => {
  console.error('[LinkQueue] ‚ùå Queue Error:', error.message);
});

linkAnalysisQueue.on('waiting', (jobId) => {
  console.log(`[LinkQueue] ‚è≥ Job ${jobId} is waiting`);
});

linkAnalysisQueue.on('active', (job) => {
  console.log(`[LinkQueue] üîÑ Job ${job.id} started (${job.name})`);
});

linkAnalysisQueue.on('completed', (job, result) => {
  console.log(`[LinkQueue] ‚úÖ Job ${job.id} completed`, result);
});

linkAnalysisQueue.on('failed', (job, error) => {
  console.error(`[LinkQueue] ‚ùå Job ${job.id} failed:`, error.message);
});

linkAnalysisQueue.on('stalled', (jobId) => {
  console.warn(`[LinkQueue] ‚ö†Ô∏è Job ${jobId} stalled (not responding)`);
});

linkAnalysisQueue.on('removed', (job) => {
  console.log(`[LinkQueue] üóëÔ∏è Job ${job.id} removed`);
});

// –°–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis

connection.on('error', (error) => {
  console.error('[LinkQueue] ‚ùå Redis connection error:', error.message);
});

connection.on('connect', () => {
  console.log('[LinkQueue] ‚úÖ Redis connected successfully');
});

connection.on('ready', () => {
  console.log('[LinkQueue] ‚úÖ Redis ready for commands');
});

connection.on('reconnecting', () => {
  console.log('[LinkQueue] üîÑ Reconnecting to Redis...');
});

connection.on('close', () => {
  console.log('[LinkQueue] üîí Redis connection closed');
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏
 * @returns {Promise<Object>}
 */
const getQueueStats = async () => {
  try {
    const counts = await linkAnalysisQueue.getJobCounts(
      'waiting', 'active', 'completed', 'failed', 'delayed'
    );
    
    return {
      waiting: counts.waiting || 0,
      active: counts.active || 0,
      completed: counts.completed || 0,
      failed: counts.failed || 0,
      delayed: counts.delayed || 0,
      total: Object.values(counts).reduce((a, b) => a + b, 0),
    };
  } catch (error) {
    console.error('[LinkQueue] Error getting queue stats:', error.message);
    return null;
  }
};

/**
 * –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö/—É–ø–∞–≤—à–∏—Ö –∑–∞–¥–∞—á
 * @param {number} grace - –í—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0 - –≤—Å–µ)
 */
const cleanQueue = async (grace = 0) => {
  try {
    console.log('[LinkQueue] üßπ Cleaning queue...');
    const jobs = await linkAnalysisQueue.clean(grace, 1000, 'completed');
    console.log(`[LinkQueue] ‚úÖ Cleaned ${jobs.length} completed jobs`);
    
    const failedJobs = await linkAnalysisQueue.clean(grace, 1000, 'failed');
    console.log(`[LinkQueue] ‚úÖ Cleaned ${failedJobs.length} failed jobs`);
    
    return { completed: jobs.length, failed: failedJobs.length };
  } catch (error) {
    console.error('[LinkQueue] ‚ùå Error cleaning queue:', error.message);
    return null;
  }
};

/**
 * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–¥–µ–±–∞–≥–∞)
 */
const obliterateQueue = async () => {
  try {
    console.log('[LinkQueue] ‚ò¢Ô∏è OBLITERATING entire queue...');
    await linkAnalysisQueue.obliterate({ force: true });
    console.log('[LinkQueue] ‚úÖ Queue obliterated');
  } catch (error) {
    console.error('[LinkQueue] ‚ùå Error obliterating queue:', error.message);
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID
 * @param {string} jobId
 * @returns {Promise<Job|null>}
 */
const getJob = async (jobId) => {
  try {
    return await linkAnalysisQueue.getJob(jobId);
  } catch (error) {
    console.error(`[LinkQueue] Error getting job ${jobId}:`, error.message);
    return null;
  }
};

/**
 * Graceful shutdown –æ—á–µ—Ä–µ–¥–∏
 */
const shutdownQueue = async () => {
  console.log('[LinkQueue] üîí Shutting down queue...');
  
  try {
    await linkAnalysisQueue.close();
    await connection.quit();
    console.log('[LinkQueue] ‚úÖ Queue shutdown complete');
  } catch (error) {
    console.error('[LinkQueue] ‚ùå Error during shutdown:', error.message);
  }
};

// Graceful shutdown –ø—Ä–∏ SIGTERM/SIGINT
process.on('SIGTERM', shutdownQueue);
process.on('SIGINT', shutdownQueue);

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
console.log('[LinkQueue] üöÄ Link analysis queue initialized');

module.exports = {
  linkAnalysisQueue,
  connection,
  getQueueStats,
  cleanQueue,
  obliterateQueue,
  getJob,
  shutdownQueue,
};

