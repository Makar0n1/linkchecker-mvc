/**
 * taskQueue.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é –∑–∞–¥–∞—á –∞–Ω–∞–ª–∏–∑–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è BullMQ)
 * 
 * –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç BullMQ –≤–º–µ—Å—Ç–æ async.queue –¥–ª—è:
 * - –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á (–ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏)
 * - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ –≤–æ—Ä–∫–µ—Ä—ã
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
 * - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 * 
 * –í–ê–ñ–ù–û: –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –≤–æ—Ä–∫–µ—Ä–∞—Ö (src/backend/workers/linkWorker.js)
 */

const { linkAnalysisQueue, getQueueStats } = require('../queues/linkQueue');
const AnalysisTask = require('../models/AnalysisTask');
const Project = require('../models/Project');
const FrontendLink = require('../models/FrontendLink');
const Spreadsheet = require('../models/Spreadsheet');
const User = require('../models/User');

console.log('[TaskQueue] üöÄ Initializing BullMQ-based task queue');

const cancelAnalysis = { value: false };

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–æ–∫ –≤ BullMQ –æ—á–µ—Ä–µ–¥—å
 * @param {string} taskId - ID –∑–∞–¥–∞—á–∏ AnalysisTask
 * @param {string} projectId - ID –ø—Ä–æ–µ–∫—Ç–∞
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} source - –ò—Å—Ç–æ—á–Ω–∏–∫ —Å—Å—ã–ª–æ–∫ ('manual' –∏–ª–∏ 'google_sheets')
 * @param {string} [spreadsheetId] - ID —Ç–∞–±–ª–∏—Ü—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
const addLinkAnalysisJobs = async (taskId, projectId, userId, source, spreadsheetId = null) => {
  try {
    console.log(`[TaskQueue] üìã Adding analysis jobs for task ${taskId}, source: ${source}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const query = { projectId, source, taskId };
    if (spreadsheetId) {
      query.spreadsheetId = spreadsheetId;
    }
    
    const links = await FrontendLink.find(query);
    
    if (links.length === 0) {
      console.log(`[TaskQueue] ‚ö†Ô∏è No links found for task ${taskId}`);
      return { added: 0, total: 0 };
    }
    
    console.log(`[TaskQueue] üìä Found ${links.length} links to analyze`);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è BullMQ (bulk –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
    const jobs = links.map((link, index) => ({
      name: `analyze-link-${source}`,
      data: {
        linkId: link._id.toString(),
        taskId: taskId.toString(),
        projectId: projectId.toString(),
        userId: userId.toString(),
        source,
        spreadsheetId: spreadsheetId ? spreadsheetId.toString() : null,
        url: link.url, // –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      },
      opts: {
        jobId: `link-${link._id}-${taskId}`, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        priority: source === 'manual' ? 1 : 2, // Manual links –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        delay: index * 100, // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–¥–∞—á (–¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞)
      },
    }));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    await linkAnalysisQueue.addBulk(jobs);
    
    console.log(`[TaskQueue] ‚úÖ Added ${jobs.length} jobs to BullMQ queue for task ${taskId}`);
    
    return { added: jobs.length, total: links.length };
  } catch (error) {
    console.error(`[TaskQueue] ‚ùå Error adding analysis jobs for task ${taskId}:`, error.message);
    throw error;
  }
};

/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
 * @param {string} taskId - ID –∑–∞–¥–∞—á–∏
 * @param {string} projectId - ID –ø—Ä–æ–µ–∫—Ç–∞
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} source - –ò—Å—Ç–æ—á–Ω–∏–∫ ('manual' –∏–ª–∏ 'google_sheets')
 * @param {string} [spreadsheetId] - ID —Ç–∞–±–ª–∏—Ü—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
const monitorTaskCompletion = async (taskId, projectId, userId, source, spreadsheetId = null) => {
  console.log(`[TaskQueue] üëÅÔ∏è Starting completion monitor for task ${taskId}`);
  
  const checkInterval = setInterval(async () => {
    try {
      const task = await AnalysisTask.findById(taskId);
      if (!task) {
        console.log(`[TaskQueue] ‚ö†Ô∏è Task ${taskId} not found, stopping monitor`);
        clearInterval(checkInterval);
        return;
      }
      
      // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      if (['cancelled', 'completed', 'failed'].includes(task.status)) {
        console.log(`[TaskQueue] üõë Task ${taskId} status: ${task.status}, stopping monitor`);
        clearInterval(checkInterval);
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (–≤–æ—Ä–∫–µ—Ä –æ–±–Ω–æ–≤–ª—è–µ—Ç processedLinks)
      if (task.processedLinks >= task.totalLinks) {
        console.log(`[TaskQueue] üéâ Task ${taskId} completed: ${task.processedLinks}/${task.totalLinks}`);
        clearInterval(checkInterval);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        await AnalysisTask.findByIdAndUpdate(taskId, {
          $set: { status: 'completed', progress: 100 },
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
        const project = await Project.findById(projectId);
        if (project) {
          if (source === 'manual') {
            project.isAnalyzingManual = false;
          } else if (source === 'google_sheets') {
            project.isAnalyzingSpreadsheet = false;
          }
          await project.save();
          console.log(`[TaskQueue] ‚úÖ Updated project ${projectId} analyzing status`);
        }
        
        // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await User.findById(userId);
        if (user) {
          user.activeTasks.delete(projectId.toString());
          await user.save();
          console.log(`[TaskQueue] ‚úÖ Cleared active task for user ${userId}`);
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ spreadsheet, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
        if (spreadsheetId) {
          await Spreadsheet.findByIdAndUpdate(spreadsheetId, {
            $set: {
              status: 'completed',
              lastRun: new Date(),
            },
            $inc: { scanCount: 1 },
          });
          console.log(`[TaskQueue] ‚úÖ Updated spreadsheet ${spreadsheetId} status`);
        }
      }
    } catch (error) {
      console.error(`[TaskQueue] ‚ùå Error monitoring task ${taskId}:`, error.message);
    }
  }, 5000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
};

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ pending –∑–∞–¥–∞—á –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
 * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ BullMQ
 */
const loadPendingTasks = async () => {
  try {
    console.log('[TaskQueue] üîç Checking for pending tasks...');
    
    // –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á (—Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ 'processing')
    const stuckTasks = await AnalysisTask.find({ 
      status: 'processing', 
      startedAt: { $lt: new Date(Date.now() - 2 * 60 * 60 * 1000) } 
    });
    
    if (stuckTasks.length > 0) {
      console.log(`[TaskQueue] ‚ö†Ô∏è Found ${stuckTasks.length} stuck tasks older than 2 hours`);
      
      for (const task of stuckTasks) {
        await AnalysisTask.findByIdAndUpdate(task._id, { 
          $set: { 
            status: 'failed', 
            error: 'Task timed out', 
            completedAt: new Date() 
          } 
        });
        console.log(`[TaskQueue] ‚ùå Marked stuck task ${task._id} as failed`);
        
        // –û—á–∏—Å—Ç–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const spreadsheet = await Spreadsheet.findOne({ 
          _id: task.data?.spreadsheetId, 
          projectId: task.projectId 
        });
        if (spreadsheet) {
          spreadsheet.status = 'error';
          await spreadsheet.save();
        }
        
        const project = await Project.findById(task.projectId);
        if (project) {
          project.isAnalyzingSpreadsheet = false;
          project.isAnalyzingManual = false;
          await project.save();
        }
        
        const user = await User.findById(task.userId);
        if (user) {
          user.activeTasks.delete(task.projectId.toString());
          await user.save();
        }
      }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ pending –∑–∞–¥–∞—á
    const pendingTasks = await AnalysisTask.find({ status: 'pending' })
      .sort({ createdAt: 1 }) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
      .limit(10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    
    console.log(`[TaskQueue] üìã Found ${pendingTasks.length} pending tasks to process`);
    
    if (pendingTasks.length === 0) {
      console.log('[TaskQueue] ‚úÖ No pending tasks found');
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é pending –∑–∞–¥–∞—á—É –≤ BullMQ
    for (const task of pendingTasks) {
      try {
        console.log(`[TaskQueue] ‚ûï Processing pending task ${task._id}, type: ${task.type}`);
        
        if (task.type === 'checkLinks') {
          const project = await Project.findById(task.projectId);
          if (!project) {
            await AnalysisTask.findByIdAndUpdate(task._id, { 
              $set: { status: 'failed', error: 'Project not found' } 
            });
            continue;
          }
          
          const userId = task.data?.userId || project.userId;
          const result = await addLinkAnalysisJobs(task._id, task.projectId, userId, 'manual');
          console.log(`[TaskQueue] ‚úÖ Added ${result.added} manual link jobs for task ${task._id}`);
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
          monitorTaskCompletion(task._id, task.projectId, userId, 'manual');
          
        } else if (task.type === 'runSpreadsheetAnalysis') {
          const spreadsheetId = task.data?.spreadsheetId;
          if (!spreadsheetId) {
            await AnalysisTask.findByIdAndUpdate(task._id, { 
              $set: { status: 'failed', error: 'Spreadsheet ID missing' } 
            });
            continue;
          }
          
          const spreadsheet = await Spreadsheet.findById(spreadsheetId);
          if (!spreadsheet) {
            await AnalysisTask.findByIdAndUpdate(task._id, { 
              $set: { status: 'failed', error: 'Spreadsheet not found' } 
            });
            continue;
          }
          
          const userId = task.data?.userId || spreadsheet.userId;
          const result = await addLinkAnalysisJobs(
            task._id, 
            task.projectId, 
            userId, 
            'google_sheets', 
            spreadsheetId
          );
          console.log(`[TaskQueue] ‚úÖ Added ${result.added} spreadsheet link jobs for task ${task._id}`);
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
          monitorTaskCompletion(task._id, task.projectId, userId, 'google_sheets', spreadsheetId);
        }
      } catch (error) {
        console.error(`[TaskQueue] ‚ùå Error processing pending task ${task._id}:`, error.message);
      }
    }
    
    console.log('[TaskQueue] ‚úÖ Finished loading pending tasks');
  } catch (error) {
    console.error('[TaskQueue] ‚ùå Error loading pending tasks:', error.message);
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏
 */
const getStats = async () => {
  try {
    const stats = await getQueueStats();
    console.log('[TaskQueue] üìä Queue stats:', stats);
    return stats;
  } catch (error) {
    console.error('[TaskQueue] ‚ùå Error getting queue stats:', error.message);
    return null;
  }
};

// –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (—ç–º—É–ª–∏—Ä—É—é—Ç async.queue API)
const initQueue = () => {
  console.log('[TaskQueue] ‚ö†Ô∏è initQueue() called (deprecated - BullMQ auto-initializes)');
  return linkAnalysisQueue;
};

const triggerNextTask = async () => {
  console.log('[TaskQueue] ‚ö†Ô∏è triggerNextTask() called (deprecated - BullMQ handles this automatically)');
  // BullMQ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –≤–æ—Ä–∫–µ—Ä—ã
  // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
const analysisQueue = {
  push: (task, callback) => {
    console.warn('[TaskQueue] ‚ö†Ô∏è analysisQueue.push() called (deprecated - use addLinkAnalysisJobs instead)');
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    // –ù–æ–≤—ã–π –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å addLinkAnalysisJobs()
    if (callback) callback(new Error('Deprecated API - use BullMQ functions'));
  },
  length: () => {
    console.warn('[TaskQueue] ‚ö†Ô∏è analysisQueue.length() called (deprecated - use getStats instead)');
    return 0;
  },
};

console.log('[TaskQueue] ‚úÖ BullMQ task queue initialized');

module.exports = {
  analysisQueue, // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (deprecated)
  linkAnalysisQueue, // –ù–æ–≤–∞—è –æ—á–µ—Ä–µ–¥—å BullMQ
  loadPendingTasks,
  addLinkAnalysisJobs, // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
  monitorTaskCompletion, // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  cancelAnalysis,
  initQueue, // Deprecated
  triggerNextTask, // Deprecated
  getStats,
};
