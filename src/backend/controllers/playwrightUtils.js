/**
 * playwrightUtils.js - –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Playwright –±—Ä–∞—É–∑–µ—Ä–æ–º
 * 
 * –ó–∞–º–µ–Ω—è–µ—Ç browserUtils.js (Puppeteer) –Ω–∞ –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π Playwright.
 * 
 * –ö–ª—é—á–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
 * - –û–¥–∏–Ω –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã)
 * - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ graceful shutdown
 * - –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å SSL –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º–∏
 */

const { chromium } = require('playwright');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
let browser = null;

// –ú–∞–∫—Å–∏–º—É–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (–¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é)
const MAX_CONTEXTS = 5;

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
const contexts = new Set();

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
 * @returns {Promise<Browser>}
 */
const initializeBrowser = async () => {
  if (!browser || !browser.isConnected()) {
    console.log('[PlaywrightUtils] Initializing Playwright browser...');
    
    try {
      browser = await chromium.launch({
        headless: true,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-web-security',
          '--disable-features=IsolateOrigins,site-per-process',
          '--disable-gpu',
          '--disable-dev-shm-usage',
        ],
        timeout: 60000,
      });
      
      console.log('[PlaywrightUtils] ‚úÖ Playwright browser initialized successfully');
    } catch (error) {
      console.error('[PlaywrightUtils] ‚ùå Failed to initialize browser:', error.message);
      throw error;
    }
  }
  
  return browser;
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±—Ä–∞—É–∑–µ—Ä–∞ (–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è)
 * @param {Object} options - –û–ø—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * @returns {Promise<BrowserContext>}
 */
const createContext = async (options = {}) => {
  const browser = await initializeBrowser();
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
  if (contexts.size >= MAX_CONTEXTS) {
    console.log(`[PlaywrightUtils] ‚ö†Ô∏è Max contexts (${MAX_CONTEXTS}) reached, closing oldest...`);
    const oldestContext = contexts.values().next().value;
    await oldestContext.close().catch(err => 
      console.error('[PlaywrightUtils] Error closing old context:', err.message)
    );
    contexts.delete(oldestContext);
  }
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
  const context = await browser.newContext({
    viewport: { width: 1920, height: 1080 },
    userAgent: options.userAgent || 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    ignoreHTTPSErrors: true,
    ...options,
  });
  
  contexts.add(context);
  console.log(`[PlaywrightUtils] üìÑ New context created (total: ${contexts.size}/${MAX_CONTEXTS})`);
  
  return context;
};

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * @param {BrowserContext} context
 */
const closeContext = async (context) => {
  if (context) {
    try {
      await context.close();
      contexts.delete(context);
      console.log(`[PlaywrightUtils] ‚úÖ Context closed (remaining: ${contexts.size})`);
    } catch (err) {
      console.error('[PlaywrightUtils] ‚ùå Error closing context:', err.message);
    }
  }
};

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
 */
const closeAllContexts = async () => {
  console.log(`[PlaywrightUtils] Closing all contexts (${contexts.size})...`);
  
  for (const context of contexts) {
    await context.close().catch(err => 
      console.error('[PlaywrightUtils] Error closing context:', err.message)
    );
  }
  
  contexts.clear();
  console.log('[PlaywrightUtils] ‚úÖ All contexts closed');
};

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
 */
const closeBrowser = async () => {
  if (browser) {
    console.log('[PlaywrightUtils] Closing browser...');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
    await closeAllContexts();
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    try {
      await browser.close();
      browser = null;
      console.log('[PlaywrightUtils] ‚úÖ Browser closed successfully');
    } catch (err) {
      console.error('[PlaywrightUtils] ‚ùå Error closing browser:', err.message);
    }
  }
};

/**
 * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ (–ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö)
 */
const restartBrowser = async () => {
  console.log('[PlaywrightUtils] ‚ö†Ô∏è Restarting browser due to error...');
  await closeBrowser();
  return await initializeBrowser();
};

/**
 * –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö URL (bit.ly, –∏ —Ç.–¥.)
 * @param {string} shortUrl - –ö–æ—Ä–æ—Ç–∫–∏–π URL
 * @returns {Promise<string>} - –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π URL
 */
const resolveShortUrl = async (shortUrl) => {
  let context;
  let page;
  
  try {
    console.log(`[PlaywrightUtils] Resolving short URL: ${shortUrl}`);
    
    context = await createContext();
    page = await context.newPage();
    
    const response = await page.goto(shortUrl, { 
      waitUntil: 'domcontentloaded', 
      timeout: 10000 
    });
    
    const resolvedUrl = page.url();
    console.log(`[PlaywrightUtils] ‚úÖ Resolved: ${shortUrl} -> ${resolvedUrl}`);
    
    return resolvedUrl;
  } catch (error) {
    console.error(`[PlaywrightUtils] ‚ùå Error resolving short URL ${shortUrl}:`, error.message);
    return shortUrl;
  } finally {
    if (page) {
      await page.close().catch(() => {});
    }
    if (context) {
      await closeContext(context);
    }
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∞—É–∑–µ—Ä–µ
 * @returns {Object}
 */
const getBrowserInfo = () => {
  return {
    isInitialized: browser !== null && browser.isConnected(),
    activeContexts: contexts.size,
    maxContexts: MAX_CONTEXTS,
  };
};

// Graceful shutdown –ø—Ä–∏ SIGINT (Ctrl+C)
process.on('SIGINT', async () => {
  console.log('[PlaywrightUtils] SIGINT received, closing browser...');
  await closeBrowser();
});

// Graceful shutdown –ø—Ä–∏ SIGTERM
process.on('SIGTERM', async () => {
  console.log('[PlaywrightUtils] SIGTERM received, closing browser...');
  await closeBrowser();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', async (reason, promise) => {
  console.error('[PlaywrightUtils] Unhandled Rejection:', reason);
  // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
});

module.exports = {
  initializeBrowser,
  createContext,
  closeContext,
  closeAllContexts,
  closeBrowser,
  restartBrowser,
  resolveShortUrl,
  getBrowserInfo,
};

