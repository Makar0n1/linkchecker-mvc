/**
 * taskFinalization.js - –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
 * 
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á:
 * - –î–ª—è Google Sheets: —ç–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
 * - –î–ª—è Manual Links: –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
 */

const FrontendLink = require('../models/FrontendLink');
const Spreadsheet = require('../models/Spreadsheet');
const AnalysisTask = require('../models/AnalysisTask');
const Project = require('../models/Project');
const User = require('../models/User');
const { exportLinksToGoogleSheetsBatch, formatGoogleSheet } = require('../controllers/googleSheetsUtils');
const { scheduleSpreadsheet } = require('../schedulers/agendaScheduler');
const { google } = require('googleapis');

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ª–∏—Å—Ç–∞ –ø–æ GID –∏–∑ Google Sheets
 * @param {string} spreadsheetId - ID Google Sheets
 * @param {number} gid - GID –ª–∏—Å—Ç–∞
 * @returns {Promise<string|null>} - –ò–º—è –ª–∏—Å—Ç–∞ –∏–ª–∏ null
 */
const getSheetNameByGid = async (spreadsheetId, gid) => {
  try {
    const path = require('path');
    const keyFilePath = path.resolve(__dirname, '../../../service-account.json');
    
    const auth = new google.auth.GoogleAuth({
      keyFile: keyFilePath,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });
    const sheets = google.sheets({ version: 'v4', auth });
    
    const response = await sheets.spreadsheets.get({
      spreadsheetId,
      fields: 'sheets(properties(sheetId,title))',
    });
    
    const sheet = response.data.sheets.find(s => s.properties.sheetId === parseInt(gid));
    return sheet ? sheet.properties.title : null;
  } catch (error) {
    console.error(`[TaskFinalization] Error getting sheet name:`, error.message);
    return null;
  }
};

/**
 * –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ Google Sheets –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
 * @param {string} taskId - ID –∑–∞–¥–∞—á–∏
 * @param {string} projectId - ID –ø—Ä–æ–µ–∫—Ç–∞
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} spreadsheetId - ID Google Sheets
 */
const finalizeSpreadsheetTask = async (taskId, projectId, userId, spreadsheetId) => {
  console.log(`[TaskFinalization] üìä Finalizing Google Sheets task ${taskId}`);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º spreadsheet
    const spreadsheet = await Spreadsheet.findOne({ 
      _id: spreadsheetId,
      projectId 
    });
    
    if (!spreadsheet) {
      console.error(`[TaskFinalization] ‚ùå Spreadsheet ${spreadsheetId} not found`);
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ª–∏—Å—Ç–∞ –ø–æ GID
    const sheetName = await getSheetNameByGid(spreadsheet.spreadsheetId, spreadsheet.gid);
    if (!sheetName) {
      throw new Error(`Sheet with GID ${spreadsheet.gid} not found in spreadsheet`);
    }
    
    console.log(`[TaskFinalization] üìã Sheet name: ${sheetName}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã
    const links = await FrontendLink.find({
      projectId,
      spreadsheetId,
      source: 'google_sheets',
      taskId
    }).sort({ rowIndex: 1 });
    
    if (links.length === 0) {
      console.warn(`[TaskFinalization] ‚ö†Ô∏è No links found for spreadsheet ${spreadsheetId}`);
      return;
    }
    
    console.log(`[TaskFinalization] üìù Found ${links.length} links to export`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º Spreadsheet —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    spreadsheet.links = links.map(link => ({
      url: link.url,
      targetDomains: link.targetDomains,
      status: link.status,
      responseCode: link.responseCode,
      overallStatus: link.overallStatus,
      isIndexable: link.isIndexable,
      indexabilityStatus: link.indexabilityStatus,
      linkType: link.linkType,
      anchorText: link.anchorText,
      canonicalUrl: link.canonicalUrl,
      lastChecked: link.lastChecked,
      rowIndex: link.rowIndex,
    }));
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Google Sheets
    console.log(`[TaskFinalization] üì§ Exporting results to Google Sheets...`);
    
    await exportLinksToGoogleSheetsBatch(
      spreadsheet.spreadsheetId,
      links,
      spreadsheet.resultRangeStart,
      spreadsheet.resultRangeEnd,
      sheetName
    );
    
    console.log(`[TaskFinalization] ‚úÖ Results exported successfully`);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    console.log(`[TaskFinalization] üé® Formatting Google Sheet...`);
    const maxRow = Math.max(...links.map(link => link.rowIndex)) + 1;
    await formatGoogleSheet(
      spreadsheet.spreadsheetId,
      maxRow,
      spreadsheet.gid,
      spreadsheet.resultRangeStart,
      spreadsheet.resultRangeEnd
    );
    
    console.log(`[TaskFinalization] ‚úÖ Sheet formatted successfully`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å spreadsheet
    spreadsheet.status = 'completed';
    spreadsheet.lastRun = new Date();
    spreadsheet.scanCount = (spreadsheet.scanCount || 0) + 1;
    await spreadsheet.save();
    
    console.log(`[TaskFinalization] ‚úÖ Spreadsheet status updated: completed (scan #${spreadsheet.scanCount})`);
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Agenda
    console.log(`[TaskFinalization] üìÖ Scheduling next run (interval: ${spreadsheet.intervalHours} hours)...`);
    await scheduleSpreadsheet(spreadsheet);
    
    console.log(`[TaskFinalization] üéâ Google Sheets task finalized successfully`);
    
  } catch (error) {
    console.error(`[TaskFinalization] ‚ùå Error finalizing spreadsheet task:`, error.message);
    console.error(error.stack);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ error
    try {
      await Spreadsheet.findByIdAndUpdate(spreadsheetId, {
        status: 'error',
        lastRun: new Date(),
      });
      console.log(`[TaskFinalization] ‚ö†Ô∏è Spreadsheet status set to 'error'`);
    } catch (updateError) {
      console.error(`[TaskFinalization] ‚ùå Failed to update spreadsheet status:`, updateError.message);
    }
    
    throw error;
  }
};

/**
 * –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ Manual Links –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
 * @param {string} taskId - ID –∑–∞–¥–∞—á–∏
 * @param {string} projectId - ID –ø—Ä–æ–µ–∫—Ç–∞
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const finalizeManualLinksTask = async (taskId, projectId, userId) => {
  console.log(`[TaskFinalization] üìã Finalizing Manual Links task ${taskId}`);
  
  try {
    // –î–ª—è manual links –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)
    const task = await AnalysisTask.findById(taskId);
    
    if (!task) {
      console.error(`[TaskFinalization] ‚ùå Task ${taskId} not found`);
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
    const project = await Project.findById(projectId);
    if (project) {
      project.isAnalyzingManual = false;
      await project.save();
      console.log(`[TaskFinalization] ‚úÖ Project.isAnalyzingManual = false`);
    }
    
    // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findById(userId);
    if (user && user.activeTasks) {
      user.activeTasks.delete(projectId.toString());
      await user.save();
      console.log(`[TaskFinalization] ‚úÖ User active task cleared`);
    }
    
    console.log(`[TaskFinalization] üéâ Manual Links task finalized successfully`);
    
  } catch (error) {
    console.error(`[TaskFinalization] ‚ùå Error finalizing manual links task:`, error.message);
    console.error(error.stack);
    throw error;
  }
};

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø)
 * @param {string} taskId - ID –∑–∞–¥–∞—á–∏
 */
const finalizeTask = async (taskId) => {
  try {
    const task = await AnalysisTask.findById(taskId);
    
    if (!task) {
      console.error(`[TaskFinalization] ‚ùå Task ${taskId} not found`);
      return;
    }
    
    const { projectId, userId, type, data } = task;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    await AnalysisTask.findByIdAndUpdate(taskId, {
      status: 'completed',
      progress: 100,
      updatedAt: new Date(),
    });
    
    console.log(`[TaskFinalization] ‚úÖ Task ${taskId} status updated to 'completed'`);
    
    // –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if (type === 'runSpreadsheetAnalysis' && data?.spreadsheetId) {
      // Google Sheets
      await finalizeSpreadsheetTask(taskId, projectId, userId, data.spreadsheetId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
      const project = await Project.findById(projectId);
      if (project) {
        project.isAnalyzingSpreadsheet = false;
        await project.save();
      }
      
    } else if (type === 'checkLinks') {
      // Manual Links
      await finalizeManualLinksTask(taskId, projectId, userId);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
    const { broadcastAnalysisComplete } = require('../utils/websocketBroadcast');
    broadcastAnalysisComplete(projectId.toString(), taskId.toString());
    
    console.log(`[TaskFinalization] üéâ Task ${taskId} fully finalized`);
    
  } catch (error) {
    console.error(`[TaskFinalization] ‚ùå Error in finalizeTask:`, error.message);
    console.error(error.stack);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
    try {
      await AnalysisTask.findByIdAndUpdate(taskId, {
        status: 'failed',
        updatedAt: new Date(),
      });
    } catch (updateError) {
      console.error(`[TaskFinalization] ‚ùå Failed to update task status:`, updateError.message);
    }
  }
};

module.exports = {
  finalizeTask,
  finalizeSpreadsheetTask,
  finalizeManualLinksTask,
};

