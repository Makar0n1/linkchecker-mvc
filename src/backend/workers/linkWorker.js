/**
 * linkWorker.js - –í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–æ–∫ –∏–∑ BullMQ –æ—á–µ—Ä–µ–¥–∏
 * 
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —á–µ—Ä–µ–∑ PM2).
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ link-analysis –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º concurrency.
 * 
 * –ó–∞–ø—É—Å–∫:
 * - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞: `npm run worker`
 * - –ü—Ä–æ–¥–∞–∫—à–Ω: —á–µ—Ä–µ–∑ PM2 (—Å–º. ecosystem.config.js)
 */

const { Worker } = require('bullmq');
const { connection } = require('../queues/linkQueue');
const { checkLinkStatus } = require('../controllers/linkAnalysisController');
const { finalizeTask } = require('./taskFinalization');
const FrontendLink = require('../models/FrontendLink');
const AnalysisTask = require('../models/AnalysisTask');
const Project = require('../models/Project');
const User = require('../models/User');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const path = require('path');

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const envPath = process.env.NODE_ENV === 'production'
  ? path.resolve(__dirname, '../../../.env.prod')
  : path.resolve(__dirname, '../../../.env');
dotenv.config({ path: envPath });

console.log(`[LinkWorker] üìã Loading environment from: ${envPath}`);
console.log(`[LinkWorker] üìã MONGODB_URI defined: ${!!process.env.MONGODB_URI}`);
console.log(`[LinkWorker] üìã REDIS_HOST: ${process.env.REDIS_HOST || 'not set'}`);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è MONGODB_URI
if (!process.env.MONGODB_URI) {
  console.error('[LinkWorker] ‚ùå MONGODB_URI is not defined in environment!');
  console.error(`[LinkWorker] ‚ùå Tried to load from: ${envPath}`);
  process.exit(1);
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ)
if (mongoose.connection.readyState === 0) {
  console.log(`[LinkWorker] üîå Connecting to MongoDB: ${process.env.MONGODB_URI}`);
  mongoose.connect(process.env.MONGODB_URI, { 
    serverSelectionTimeoutMS: 5000,
    maxPoolSize: 10,
  })
    .then(() => console.log('[LinkWorker] ‚úÖ Connected to MongoDB'))
    .catch(err => {
      console.error('[LinkWorker] ‚ùå MongoDB connection error:', err.message);
      console.error('[LinkWorker] ‚ùå URI:', process.env.MONGODB_URI);
      process.exit(1);
    });
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞
const CONCURRENCY = parseInt(process.env.WORKER_CONCURRENCY) || 3;
const MAX_JOBS_PER_WORKER = parseInt(process.env.MAX_JOBS_PER_WORKER) || 5;

console.log(`[LinkWorker] ‚öôÔ∏è Configuration: CONCURRENCY=${CONCURRENCY}, MAX_JOBS=${MAX_JOBS_PER_WORKER}`);

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á–∏
 * @param {Job} job - –ó–∞–¥–∞—á–∞ –∏–∑ BullMQ
 */
const processJob = async (job) => {
  const { linkId, taskId, projectId, userId } = job.data;
  
  console.log(`[LinkWorker] üîÑ Processing job ${job.id}: link=${linkId}, task=${taskId}`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
    const task = await AnalysisTask.findById(taskId);
    if (!task) {
      console.log(`[LinkWorker] ‚ö†Ô∏è Task ${taskId} not found, skipping job ${job.id}`);
      return { status: 'task_not_found', linkId, taskId };
    }
    
    if (task.status === 'cancelled') {
      console.log(`[LinkWorker] ‚ö†Ô∏è Task ${taskId} cancelled, skipping job ${job.id}`);
      return { status: 'cancelled', linkId, taskId };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É
    const link = await FrontendLink.findById(linkId);
    if (!link) {
      console.log(`[LinkWorker] ‚ö†Ô∏è Link ${linkId} not found, skipping job ${job.id}`);
      return { status: 'link_not_found', linkId, taskId };
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏ (–Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏)
    await job.updateProgress(0);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
    console.log(`[LinkWorker] üîç Analyzing link: ${link.url}`);
    const result = await checkLinkStatus(link);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏ (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
    await job.updateProgress(100);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –≤ –∑–∞–¥–∞—á–µ
    const updatedTask = await AnalysisTask.findByIdAndUpdate(
      taskId,
      {
        $inc: { processedLinks: 1 },
        updatedAt: new Date(),
      },
      { new: true }
    );
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    const progress = Math.round((updatedTask.processedLinks / updatedTask.totalLinks) * 100);
    await AnalysisTask.findByIdAndUpdate(taskId, {
      $set: { progress },
    });
    
    console.log(`[LinkWorker] ‚úÖ Job ${job.id} completed: ${updatedTask.processedLinks}/${updatedTask.totalLinks} (${progress}%)`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –≤—Å—è –∑–∞–¥–∞—á–∞
    if (updatedTask.processedLinks >= updatedTask.totalLinks) {
      console.log(`[LinkWorker] üéâ Task ${taskId} fully completed! Starting finalization...`);
      
      // –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ (—ç–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
      await finalizeTask(taskId);
      
      console.log(`[LinkWorker] üßπ Task ${taskId} finalized successfully`);
    }
    
    return {
      status: 'completed',
      linkId,
      taskId,
      linkStatus: result.status,
      overallStatus: result.overallStatus,
      progress: `${updatedTask.processedLinks}/${updatedTask.totalLinks}`,
    };
  } catch (error) {
    console.error(`[LinkWorker] ‚ùå Error processing job ${job.id}:`, error.message);
    console.error(error.stack);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å –æ—à–∏–±–∫–æ–π
    await AnalysisTask.findByIdAndUpdate(taskId, {
      $inc: { processedLinks: 1 }, // –°—á–∏—Ç–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é (—á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–ª–æ)
      $set: { updatedAt: new Date() },
    }).catch(err => console.error('[LinkWorker] Error updating task on failure:', err.message));
    
    throw error; // BullMQ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä—ã
  }
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–∞
 */
const linkWorker = new Worker(
  'link-analysis',
  processJob,
  {
    connection,
    concurrency: CONCURRENCY, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
    limiter: {
      max: MAX_JOBS_PER_WORKER, // –ú–∞–∫—Å–∏–º—É–º –∑–∞–¥–∞—á –≤ —Å–µ–∫—É–Ω–¥—É –Ω–∞ –≤–æ—Ä–∫–µ—Ä
      duration: 1000,
    },
    lockDuration: 300000, // 5 –º–∏–Ω—É—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è)
    stalledInterval: 30000, // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  }
);

/**
 * –°–æ–±—ã—Ç–∏—è –≤–æ—Ä–∫–µ—Ä–∞
 */

linkWorker.on('ready', () => {
  console.log(`[LinkWorker] ‚úÖ Worker ready (concurrency: ${CONCURRENCY})`);
});

linkWorker.on('active', (job) => {
  console.log(`[LinkWorker] üîÑ Job ${job.id} started`);
});

linkWorker.on('completed', (job, result) => {
  console.log(`[LinkWorker] ‚úÖ Job ${job.id} completed:`, result.status);
});

linkWorker.on('failed', (job, error) => {
  console.error(`[LinkWorker] ‚ùå Job ${job?.id} failed:`, error.message);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –¥–µ–±–∞–≥–∞
  if (job) {
    console.error(`[LinkWorker] Job data:`, JSON.stringify(job.data, null, 2));
    console.error(`[LinkWorker] Attempt: ${job.attemptsMade}/${job.opts.attempts}`);
  }
});

linkWorker.on('stalled', (jobId) => {
  console.warn(`[LinkWorker] ‚ö†Ô∏è Job ${jobId} stalled (not responding)`);
});

linkWorker.on('progress', (job, progress) => {
  console.log(`[LinkWorker] üìä Job ${job.id} progress: ${progress}%`);
});

linkWorker.on('error', (error) => {
  console.error('[LinkWorker] ‚ùå Worker error:', error.message);
});

linkWorker.on('closed', () => {
  console.log('[LinkWorker] üîí Worker closed');
});

/**
 * Graceful shutdown
 */
const gracefulShutdown = async () => {
  console.log('[LinkWorker] üîí Shutting down gracefully...');
  
  try {
    await linkWorker.close();
    await mongoose.connection.close();
    console.log('[LinkWorker] ‚úÖ Worker shutdown complete');
    process.exit(0);
  } catch (error) {
    console.error('[LinkWorker] ‚ùå Error during shutdown:', error.message);
    process.exit(1);
  }
};

process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('[LinkWorker] ‚ö†Ô∏è Unhandled Rejection:', reason);
  // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
});

process.on('uncaughtException', (error) => {
  console.error('[LinkWorker] ‚ö†Ô∏è Uncaught Exception:', error.message);
  console.error(error.stack);
  // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
  gracefulShutdown();
});

console.log(`[LinkWorker] üöÄ Link worker started (PID: ${process.pid})`);

module.exports = linkWorker;

